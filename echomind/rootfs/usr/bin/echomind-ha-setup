#!/usr/bin/env bash
# shellcheck shell=bash

# ==============================================================================
# Script de Configuración de EchoMind para Home Assistant
# ==============================================================================
# Este script se ejecuta una vez durante el inicio del addon (desde run.sh)
# para preparar la configuración de la aplicación Node.js (EchoMind).

# Usar bashio para logging si está disponible (en el contexto de run.sh, sí lo está)
# Si se ejecuta este script manualmente fuera de run.sh, bashio no funcionará.
if command -v bashio &> /dev/null && bashio::is.addon; then
    log_info() { bashio::log.info "$1"; }
    log_warning() { bashio::log.warning "$1"; }
    log_error() { bashio::log.error "$1"; }
else
    log_info() { echo "[INFO] $1"; }
    log_warning() { echo "[WARN] $1"; }
    log_error() { echo "[ERROR] $1"; }
fi

log_info "Iniciando script de configuración echomind-ha-setup..."

# Variables de entorno (deberían haber sido exportadas por run.sh)
# Se leen aquí para usarlas en la generación de archivos de configuración
# o para modificar archivos existentes de la app Node.js.

DATA_DIR="${DATA_DIR:-/data}"
ECHOMIND_API_PORT="${ECHOMIND_API_PORT:-8765}"
ECHOMIND_WEB_PORT="${ECHOMIND_WEB_PORT:-3000}"

# Ruta al directorio de la aplicación Node.js
APP_DIR="/app"

# Ruta para el archivo de configuración que generará este script para la app Node.js
# El nombre y formato dependen de cómo la app Node.js espera leer su config.
# Asumiremos que puede leer un archivo JSON llamado echomind_config.json en /app/config
# o quizás en /data/config para que sea persistente y editable por el usuario si es necesario.
# Por ahora, lo pondremos en /app/config y la app Node.js lo leería desde ahí.
# Si necesitas que sea persistente o que el usuario lo modifique desde /config del addon,
# la lógica de lectura en la app Node.js cambiaría.

CONFIG_OUTPUT_DIR="${APP_DIR}/config"
CONFIG_FILE_PATH="${CONFIG_OUTPUT_DIR}/echomind_addon_config.json"

log_info "Directorio de datos: ${DATA_DIR}"
log_info "Directorio de la aplicación: ${APP_DIR}"
log_info "Archivo de configuración a generar: ${CONFIG_FILE_PATH}"

# Crear el directorio de configuración si no existe dentro de /app
mkdir -p "${CONFIG_OUTPUT_DIR}"

log_info "Generando archivo de configuración para EchoMind (${CONFIG_FILE_PATH})..."

# Generar el archivo de configuración JSON
# Este archivo proporcionará a la aplicación Node.js las rutas y configuraciones
# específicas para ejecutarse como un addon de Home Assistant.
# La aplicación Node.js deberá ser modificada para leer este archivo.

cat > "${CONFIG_FILE_PATH}" << EOF
{
  "homeAssistantIntegration": {
    "enabled": true,
    "supervisorApiUrl": "http://supervisor/core/api",
    "supervisorToken": "${SUPERVISOR_TOKEN:-NO_TOKEN_SET}", // SUPERVISOR_TOKEN es inyectado por HA
    "addonApiPort": ${ECHOMIND_API_PORT},
    "addonWebPort": ${ECHOMIND_WEB_PORT}
  },
  "nodeApp": {
    "environment": "production",
    "logLevel": "${LOG_LEVEL:-info}",
    "encryptionEnabled": ${ENCRYPTION_ENABLED:-true},
    "localOnly": ${LOCAL_ONLY:-true},
    "apiKeyProtected": $( [ -n "${API_KEY}" ] && echo true || echo false ),
    "maxMemories": ${MAX_MEMORIES:-10000},
    "cleanupDays": ${CLEANUP_DAYS:-30}
  },
  "paths": {
    "dataDirectory": "${DATA_DIR}",
    "databaseDirectory": "${DATA_DIR}/echomind_db",
    "backupsDirectory": "${DATA_DIR}/backups",
    "appConfigDirectory": "${DATA_DIR}/config" 
  },
  "api": {
    "port": ${ECHOMIND_API_PORT},
    "corsAllowedOrigins": [
      "http://supervisor/ingress",
      "app://hass.io", // Para la app móvil de HA
      "null" // Para acceso local vía file:// (si aplica para alguna UI)
      // Deberías añadir la URL de tu instancia de HA si accedes directamente al addon
      // ejemplo: "https://my-home-assistant.duckdns.org"
    ]
  },
  "webUI": {
    "port": ${ECHOMIND_WEB_PORT}
  }
}
EOF

if [ $? -eq 0 ]; then
    log_info "Archivo de configuración ${CONFIG_FILE_PATH} generado exitosamente."
else
    log_error "Error al generar el archivo de configuración ${CONFIG_FILE_PATH}."
    # Considerar salir con error si este archivo es crítico: exit 1
fi

# Modificaciones adicionales a la app Node.js si son necesarias:
# Por ejemplo, si necesitas modificar un package.json o algún otro archivo de config
# que la app Node.js ya tiene.

# Ejemplo: Modificar el package.json para asegurar que el script de inicio es correcto
# SCRIPT_TO_ENSURE="ha:start"
# if jq -e ".scripts.\"${SCRIPT_TO_ENSURE}\"" "${APP_DIR}/package.json" > /dev/null; then
#    log_info "El script '${SCRIPT_TO_ENSURE}' ya existe en package.json."
# else
#    log_warning "El script '${SCRIPT_TO_ENSURE}' no existe en package.json. Considera añadirlo."
    # Podrías intentar añadirlo con jq, pero puede ser complejo y propenso a errores.
    # jq ".scripts += {\"${SCRIPT_TO_ENSURE}\": \"node server.js --configDir /data/config\"}" "${APP_DIR}/package.json" > temp_package.json && mv temp_package.json "${APP_DIR}/package.json"
# fi

# Ejemplo: Si la app Node.js usa un .env file, podrías generarlo aquí
# ENV_FILE_PATH="${APP_DIR}/.env"
# log_info "Generando archivo .env en ${ENV_FILE_PATH}..."
# cat > "${ENV_FILE_PATH}" << EOF_ENV
# NODE_ENV=production
# PORT=${ECHOMIND_API_PORT}
# WEB_PORT=${ECHOMIND_WEB_PORT}
# DATA_DIR=${DATA_DIR}
# LOG_LEVEL=${LOG_LEVEL:-info}
# # ... más variables que tu app Node.js espere de un .env
# EOF_ENV

log_info "Configuración de EchoMind para Home Assistant completada."

# Salir con éxito
exit 0
